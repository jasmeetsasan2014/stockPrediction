return(accuracy)
}
####
# stocks <- addExtCalendarInfo(stocks)
stocks <- addSpread(stocks)
# stocks <- addSMAMultStocks(stocks, 20)
stocks <- createDiffMultStocks(stocks, perfMetric='close')
stocks <- normalizeMultStocks(stocks)
stocks <- addOutcome(stocks, perfMetric='close')
stocks$close.diff <- NULL
#### split training vs. test
set.seed(123)
split <- sample.split(stocks$outcome, SplitRatio=0.7)
train <- stocks[split==TRUE, ]
test <- stocks[split==FALSE, ]
#### naive model
table(train$outcome)
predNaive <- rep(1, nrow(test))
confMatrixNaive <- table(predNaive, test$outcome)
calcAccFrConfMatrix(confMatrixNaive)
#### logistic regression
modelLogis <- glm(outcome ~ . - date - ticker, data=train, family='binomial')
summary(modelLogis)
predProbLogis <- predict(modelLogis, newdata=test, type='response')
predLogis <- ifelse(predProbLogis > 0.5, 1, 0)
confMatrixLogis <- table(predLogis, test$outcome)
calcAccFrConfMatrix(confMatrixLogis)
train$outcome <- as.factor(train$outcome)
test$outcome <- as.factor(test$outcome)
modelRF <- randomForest(outcome ~ . - date - ticker, data=train)
predProbRF <- predict(modelRF, newdata=test, type='prob')[ , 2]
predRF <- ifelse(predProbRF > 0.5, 1, 0)
confMatrixRF <- table(predRF, test$outcome)
calcAccFrConfMatrix(confMatrixRF)
#### linear discriminant analysis
modelLDA <- lda(outcome ~ . - date - ticker, data=train)
predProbLDA <- predict(modelLDA, newdata=test)$posterior[ , 2]
predLDA <- ifelse(predProbLDA > 0.5, 1, 0)
confMatrixLDA <- table(predLDA, test$outcome)
calcAccFrConfMatrix(confMatrixLDA)
#### quadratic discriminant analysis
modelQDA <- qda(outcome ~ . - date - ticker, data=train)
predProbQDA <- predict(modelQDA, newdata=test)$posterior[ , 2]
predQDA <- ifelse(predProbQDA > 0.5, 1, 0)
confMatrixQDA <- table(predQDA, test$outcome)
calcAccFrConfMatrix(confMatrixQDA)
head(predProbLDA)
head(predProbRF)
head(predProbLogis)
predProbEnsemble <- (predProbLogis + predProbRF + predProbLogis) / 3
predProbEnsemble
predEnsemble <- ifelse(predProbEnsemble > 0.5, 1, 0)
confMatrixEnsemble <- table(predEnsemble, test$outcome)
calcAccFrConfMatrix(confMatrixEnsemble)
rm(predProbEnsemble)
rm(predEnsemble)
rm(confMatrixEnsemble)
predProbEns <- (predProbLogis + predProbRF + predProbLogis) / 3
predEns <- ifelse(predProbEns > 0.5, 1, 0)
confMatrixEns <- table(predEns, test$outcome)
accEns <- calcAccFrConfMatrix(confMatrixEns)
accEns
accQDA <- calcAccFrConfMatrix(confMatrixQDA)
accQDA
accLDA <- calcAccFrConfMatrix(confMatrixLDA)
accLDA
accRF <- calcAccFrConfMatrix(confMatrixRF)
accRF
accDT <- calcAccFrConfMatrix(confMatrixDT)
modelDT <- rpart(outcome ~ . - date - ticker, data=train, method='class')
prp(modelDT)
predProbDT <- predict(modelDT, newdata=test, type='prob')[ , 2]
predDT <- ifelse(predProbDT > 0.5, 1, 0)
confMatrixDT <- table(predDT, test$outcome)
accDT <- calcAccFrConfMatrix(confMatrixDT)
modelDT <- rpart(outcome ~ . - date - ticker, data=train, method='class')
library(rpart)
modelDT <- rpart(outcome ~ . - date - ticker, data=train, method='class')
accNaive <- calcAccFrConfMatrix(confMatrixNaive)
modelDT <- rpart(outcome ~ . - date - ticker, data=train, method='class')
head(train)
train$outcome <- as.integer(train$outcome)
modelDT <- rpart(outcome ~ . - date - ticker, data=train, method='class')
modelDT <- rpart(outcome ~ open + high + low + close + volume + adjusted + spread, data=train, method='class')
prp(modelDT)
predProbDT <- predict(modelDT, newdata=test, type='prob')[ , 2]
predDT <- ifelse(predProbDT > 0.5, 1, 0)
confMatrixDT <- table(predDT, test$outcome)
accDT <- calcAccFrConfMatrix(confMatrixDT)
accDT
predProbEns <- (predProbLogis + predProbRF + predProbLogis) / 3
predEns <- ifelse(predProbEns > 0.5, 1, 0)
confMatrixEns <- table(predEns, test$outcome)
accEns <- calcAccFrConfMatrix(confMatrixEns)
accEns
accNaive
accNaive
accLogis
accLogis <- calcAccFrConfMatrix(confMatrixLogis)
accLogis
accDT <- calcAccFrConfMatrix(confMatrixDT)
accDT
accNaive
accLogis
accDT
accRF
accLDA
accQDA
accEns
accNaive
accLogis
accDT
accRF
accLDA
accQDA
accEns
predProbEns <- (predProbLogis + predProbRF + predProbLDA) / 3
predEns <- ifelse(predProbEns > 0.5, 1, 0)
confMatrixEns <- table(predEns, test$outcome)
accEns <- calcAccFrConfMatrix(confMatrixEns)
accEns
predProbEns <- (predProbLogis + predProbLDA) / 2
predEns <- ifelse(predProbEns > 0.5, 1, 0)
confMatrixEns <- table(predEns, test$outcome)
accEns <- calcAccFrConfMatrix(confMatrixEns)
accEns
accEns
accLogis
accLDA
rm(predProbEns)
rm(predEns)
rm(accEns)
rm(confMatrixEnc)
rm(confMatrixEns)
predProbEns1 <- (predProbLogis + predProbRF + predProbLDA) / 3
predEns1 <- ifelse(predProbEns > 0.5, 1, 0)
predEns1 <- ifelse(predProbEns1 > 0.5, 1, 0)
confMatrixEns1 <- table(predEns1, test$outcome)
accEns1 <- calcAccFrConfMatrix(confMatrixEns1)
accEns1
predProbEns2 <- (predProbLogis + predProbLDA) / 2
predEns2 <- ifelse(predProbEns2 > 0.5, 1, 0)
confMatrixEns2 <- table(predEns2, test$outcome)
accEns2 <- calcAccFrConfMatrix(confMatrixEns2)
accEns2
accEns1
accEns2
head(stocks)
summary(modelLogis)
head(stocks)
stocks <- read.csv('./data/stocksVer.csv', na.strings=c('', ' ', NA))
## spread
addSpread <- function(df) {
df$spread <- df$high - df$low
return(df)
}
## simple moving average for a single stock
addSMASingleStock <- function(df, n) {
colName <- paste0('sma', n)
df[[colName]] <- SMA(Cl(df), n)
return(df)
}
head(stocks)
df <- subset(stocks, ticker=='YHOO')
head(df)
perfMetric <- 'close'
colName <- paste0(perfMetric, '.diff')
df[[colName]] <- c(0, diff(df[[perfMetric]]))
head(df)
## create a column for perf differentials for a single stock
createDiffSingleStock <- function(df, perfMetric) {
colName <- paste0(perfMetric, '.diff')
df[[colName]] <- c(diff(df[[perfMetric]]), 0)
return(df)
}
rm(colName)
rm(perfMetric)
rm(df)
## create a column for perf differentials for multiple stocks
createDiffMultStocks <- function(df, perfMetric) {
outputDF <- ddply(df, 'ticker', function(x) {
# print(as.character(x$ticker[1]))
createDiffSingleStock(x, perfMetric)
})
return(outputDF)
}
normalizeSingleStock <- function(df) {
## numeric columns to normalize
numCols <- c('open', 'high', 'low', 'close', 'volume', 'adjusted', 'spread')
numCols <- c(numCols, colnames(df)[grepl('sma|diff', colnames(df))])
## normalize
df[numCols] <- sapply(df[numCols], scale)
## round
df[numCols] <- round(df[numCols], 2)
## return
return(df)
}
rm(addOutcome)
df <- stocks
df <- createDiffMultStocks(df, perfMetric)
perfMetric <- 'close'
df <- createDiffMultStocks(df, perfMetric)
head(df)
head(stocks)
head(df)
df <- subset(stocks, ticker=='YHOO')
perfMetric
createDiffSingleStock <- function(df, perfMetric) {
colName <- paste0(perfMetric, 'NextDay')
df[[colName]] <- c(df[[2:perfMetric]], 0)
return(df)
}
rm(createDiffSingleStock)
rm(createDiffMultStocks)
createNextDayPerfSingleStock <- function(df, perfMetric) {
colName <- paste0(perfMetric, 'NextDay')
df[[colName]] <- c(df[[2:perfMetric]], 0)
return(df)
}
rm(createNextDayPerfSingleStock)
## create a column for next day's performance
addNextDayPerfSingleStock <- function(df, perfMetric) {
colName <- paste0(perfMetric, 'NextDay')
df[[colName]] <- c(df[[2:perfMetric]], 0)
return(df)
}
df <- addNextDayPerfSingleStock(df, perfMetric)
addNextDayPerfSingleStock <- function(df, perfMetric) {
colName <- paste0(perfMetric, 'NextDay')
df[[colName]] <- c(df[[perfMetric]][2:nrow(df)], 0)
return(df)
}
df <- addNextDayPerfSingleStock(df, perfMetric)
head(df)
tail(df)
rm(df)
rm(perfMetric)
addNextDayPerfMultStocks <- function(df, perfMetric) {
outputDF <- ddply(df, 'ticker', function(x) {
# print(as.character(x$ticker[1]))
addNextDayPerfSingleStock(x, perfMetric)
})
return(outputDF)
}
## add outcome column for df containing multiple stocks
addOutcomeCol <- function(df, perfMetric) {
## add column for next day's performance
df <- addNextDayPerfMultStocks(df, perfMetric)
## create outcome column
nextDayPerfColName <- paste0(perfMetric, '.NextDay')
df$outcome <- ifelse(df[[nextDayPerfColName]] > df[[perfMetric]], 1, 0)
## remove column for next day's performance
df[[nextDayPerfColName]] <- NULL
## return
return(df)
}
df <- stocks
df <- addOutcomeCol(df, perfMetric)
perfMetric <- 'close'
df <- addOutcomeCol(df, perfMetric)
df <- addNextDayPerfMultStocks(df, perfMetric)
head(df)
tail(df)
addNextDayPerfSingleStock <- function(df, perfMetric) {
colName <- paste0(perfMetric, 'NextDay')
df[[colName]] <- c(df[[perfMetric]][2:nrow(df)], NA)
return(df)
}
df <- stocks
df <- addOutcomeCol(df, perfMetric)
df <- addNextDayPerfMultStocks(df, perfMetric)
tail(df)
## add outcome column for df containing multiple stocks
addOutcomeCol <- function(df, perfMetric) {
## add column for next day's performance
df <- addNextDayPerfMultStocks(df, perfMetric)
## create outcome column
nextDayPerfColName <- paste0(perfMetric, 'NextDay')
df$outcome <- ifelse(df[[nextDayPerfColName]] > df[[perfMetric]], 1, 0)
## remove column for next day's performance
df[[nextDayPerfColName]] <- NULL
## return
return(df)
}
df <- stocks
df <- addOutcomeCol(df, perfMetric)
head(df)
head(df, 7)
head(df, 8)
rm(df)
rm(perfMetric)
## add outcome column for df containing multiple stocks
addOutcomeCol <- function(df, perfMetric) {
## add column for next day's performance
df <- addNextDayPerfMultStocks(df, perfMetric)
## create outcome column
nextDayPerfColName <- paste0(perfMetric, 'NextDay')
df$outcome <- ifelse(df[[nextDayPerfColName]] > df[[perfMetric]], 1, 0)
## remove column for next day's performance
df[[nextDayPerfColName]] <- NULL
## return
return(df)
}
## calculate accuracy from confusion matrix
calcAccFrConfMatrix <- function(confMatrix) {
accuracy <- sum(diag(confMatrix)) / sum(confMatrix)
return(accuracy)
}
stocks <- addSpread(stocks)
stocks <- addOutcomeCol(stocks, perfMetric='close')
head(stock)
head(stocks)
stocks <- normalizeMultStocks(stocks)
set.seed(123)
split <- sample.split(stocks$outcome, SplitRatio=0.7)
train <- stocks[split==TRUE, ]
test <- stocks[split==FALSE, ]
table(train$outcome)
predNaive <- rep(1, nrow(test))
confMatrixNaive <- table(predNaive, test$outcome)
accNaive <- calcAccFrConfMatrix(confMatrixNaive)
accNaive
modelLogis <- glm(outcome ~ . - date - ticker, data=train, family='binomial')
summary(modelLogis)
predProbLogis <- predict(modelLogis, newdata=test, type='response')
predLogis <- ifelse(predProbLogis > 0.5, 1, 0)
confMatrixLogis <- table(predLogis, test$outcome)
accLogis <- calcAccFrConfMatrix(confMatrixLogis)
accLogis
modelLogis <- glm(outcome ~ . - date - ticker, data=train, family='binomial')
summary(modelLogis)
predProbLogis <- predict(modelLogis, newdata=test, type='response')
rm(list=ls())
stocks <- read.csv('./data/stocksVer.csv', na.strings=c('', ' ', NA))
#### functions
## add extra calendar info from date
addExtCalendarInfo <- function(df) {
df <- as.data.frame(df)
df$date <- as.Date(df$date)
df$year <- as.integer(format(df$date, '%Y'))
df$month <- as.factor(format(df$date, '%m'))
df$week <- as.factor(format(df$date, '%W'))
df$day <- as.factor(weekdays(df$date, abbr=TRUE))
return(df)
}
## remove extra calendar info
rmExtCalendarInfo <- function(df) {
df$year <- df$month <- df$week <- df$day <- NULL
return(df)
}
## spread
addSpread <- function(df) {
df$spread <- df$high - df$low
return(df)
}
## simple moving average for a single stock
addSMASingleStock <- function(df, n) {
colName <- paste0('sma', n)
df[[colName]] <- SMA(Cl(df), n)
return(df)
}
## simple moving average for multiple stocks
addSMAMultStocks <- function(df, n) {
outputDF <- ddply(df, 'ticker', function(x) {
addSMASingleStock(x, n)
})
return(outputDF)
}
## create a column for next day's performance
addNextDayPerfSingleStock <- function(df, perfMetric) {
colName <- paste0(perfMetric, 'NextDay')
df[[colName]] <- c(df[[perfMetric]][2:nrow(df)], NA)
return(df)
}
## create a column for perf differentials for multiple stocks
addNextDayPerfMultStocks <- function(df, perfMetric) {
outputDF <- ddply(df, 'ticker', function(x) {
# print(as.character(x$ticker[1]))
addNextDayPerfSingleStock(x, perfMetric)
})
return(outputDF)
}
## normalize columns for a single stock
normalizeSingleStock <- function(df) {
## numeric columns to normalize
numCols <- c('open', 'high', 'low', 'close', 'volume', 'adjusted', 'spread')
numCols <- c(numCols, colnames(df)[grepl('sma|diff', colnames(df))])
## normalize
df[numCols] <- sapply(df[numCols], scale)
## round
df[numCols] <- round(df[numCols], 2)
## return
return(df)
}
## normalize columns for multiple stocks
normalizeMultStocks <- function(df) {
outputDF <- ddply(df, 'ticker', function(x) {
# print(as.character(x$ticker[1]))
normalizeSingleStock(x)
})
return(outputDF)
}
## add outcome column for df containing multiple stocks
addOutcomeCol <- function(df, perfMetric) {
## add column for next day's performance
df <- addNextDayPerfMultStocks(df, perfMetric)
## create outcome column
nextDayPerfColName <- paste0(perfMetric, 'NextDay')
df$outcome <- ifelse(df[[nextDayPerfColName]] > df[[perfMetric]], 1, 0)
## remove column for next day's performance
df[[nextDayPerfColName]] <- NULL
## return
return(df)
}
## calculate accuracy from confusion matrix
calcAccFrConfMatrix <- function(confMatrix) {
accuracy <- sum(diag(confMatrix)) / sum(confMatrix)
return(accuracy)
}
####
# stocks <- addExtCalendarInfo(stocks)
stocks <- addSpread(stocks)
# stocks <- addSMAMultStocks(stocks, 20)
stocks <- addOutcomeCol(stocks, perfMetric='close')
stocks <- normalizeMultStocks(stocks)
#### split training vs. test
set.seed(123)
split <- sample.split(stocks$outcome, SplitRatio=0.7)
train <- stocks[split==TRUE, ]
test <- stocks[split==FALSE, ]
table(train$outcome)
predNaive <- rep(1, nrow(test))
confMatrixNaive <- table(predNaive, test$outcome)
accNaive <- calcAccFrConfMatrix(confMatrixNaive)
accNaive
#### logistic regression
modelLogis <- glm(outcome ~ . - date - ticker, data=train, family='binomial')
summary(modelLogis)
predProbLogis <- predict(modelLogis, newdata=test, type='response')
head(stocks)
table(is.na(stocks$outcome))
## remove rows with NAs for outcome
rmMissValRows <- function(df) {
df <- subset(df, !is.na(df$outcome))
return(df)
}
stocks <- rmMissValRows(stocks)
dim(stocks)
138744 + 59565
set.seed(123)
split <- sample.split(stocks$outcome, SplitRatio=0.7)
train <- stocks[split==TRUE, ]
test <- stocks[split==FALSE, ]
modelLogis <- glm(outcome ~ . - date - ticker, data=train, family='binomial')
summary(modelLogis)
predProbLogis <- predict(modelLogis, newdata=test, type='response')
predLogis <- ifelse(predProbLogis > 0.5, 1, 0)
confMatrixLogis <- table(predLogis, test$outcome)
accLogis <- calcAccFrConfMatrix(confMatrixLogis)
accLogis
modelDT <- rpart(outcome ~ open + high + low + close + volume + adjusted + spread, data=train, method='class')
prp(modelDT)
predProbDT <- predict(modelDT, newdata=test, type='prob')[ , 2]
predDT <- ifelse(predProbDT > 0.5, 1, 0)
confMatrixDT <- table(predDT, test$outcome)
accDT <- calcAccFrConfMatrix(confMatrixDT)
accDT
train$outcome <- as.factor(train$outcome)
test$outcome <- as.factor(test$outcome)
modelRF <- randomForest(outcome ~ . - date - ticker, data=train)
predProbRF <- predict(modelRF, newdata=test, type='prob')[ , 2]
predRF <- ifelse(predProbRF > 0.5, 1, 0)
confMatrixRF <- table(predRF, test$outcome)
accRF <- calcAccFrConfMatrix(confMatrixRF)
accRF
#### linear discriminant analysis
modelLDA <- lda(outcome ~ . - date - ticker, data=train)
predProbLDA <- predict(modelLDA, newdata=test)$posterior[ , 2]
predLDA <- ifelse(predProbLDA > 0.5, 1, 0)
confMatrixLDA <- table(predLDA, test$outcome)
accLDA <- calcAccFrConfMatrix(confMatrixLDA)
accLDA
#### quadratic discriminant analysis
modelQDA <- qda(outcome ~ . - date - ticker, data=train)
predProbQDA <- predict(modelQDA, newdata=test)$posterior[ , 2]
predQDA <- ifelse(predProbQDA > 0.5, 1, 0)
confMatrixQDA <- table(predQDA, test$outcome)
accQDA <- calcAccFrConfMatrix(confMatrixQDA)
accQDA
predProbEns1 <- (predProbLogis + predProbRF + predProbLDA) / 3
predEns1 <- ifelse(predProbEns1 > 0.5, 1, 0)
confMatrixEns1 <- table(predEns1, test$outcome)
accEns1 <- calcAccFrConfMatrix(confMatrixEns1)
accEns1
#### ensemble 2 (LR + LDA)
predProbEns2 <- (predProbLogis + predProbLDA) / 2
predEns2 <- ifelse(predProbEns2 > 0.5, 1, 0)
confMatrixEns2 <- table(predEns2, test$outcome)
accEns2 <- calcAccFrConfMatrix(confMatrixEns2)
accEns2
accNaive
accLogis
accDT
accRF
accLDA
accQDA
accEns1
accEns2
savehistory(file="myfile") # default is ".Rhistory"
save(file="/Users/hawooksong/Desktop/rfinance/script2.RData")
?save
save(list=ls(), file="/Users/hawooksong/Desktop/rfinance/script2.RData")
